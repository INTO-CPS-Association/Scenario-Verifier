name = "Example master that has a loop within a loop"
scenario = {
    fmus = {
        A = {
            can-reject-step = true,
            inputs = {
                f = {reactivity=reactive}
            }
            outputs = {
                x = {dependencies-init=[], dependencies=[]}
                v = {dependencies-init=[], dependencies=[]}
            }
        }
        B = {
            can-reject-step = true,
            inputs = {
                x = {reactivity=delayed}
                v = {reactivity=reactive}
                g = {reactivity=reactive}
            }
            outputs = {
                f = {dependencies-init=[x, v], dependencies=[x, v]}
                z = {dependencies-init=[], dependencies=[]}
            }
        }
        C = {
            can-reject-step = true,
            inputs = {
                z = {reactivity=delayed}
            }
            outputs = {
                g = {dependencies-init=[z], dependencies=[z]}
            }
        }
    }
    connections = [
        A.x -> B.x
        A.v -> B.v
        B.f -> A.f
        B.z -> C.z
        C.g -> B.g
    ]
    max-possible-step-size = 3 # This means all possible steps that the master can take at each cosimstep.
}
initialization = [
    {get: A.x}
    {set: B.x}
    {get: A.v}
    {set: B.v}
    {get: B.f}
    {set: A.f}
    {get: B.z}
    {set: C.z}
    {get: C.g}
    {set: B.g}
]
cosim-step = {
    cosim-step1 =
    [
        {save-state: A}
        {save-state: B}
        {save-state: C}
        {
            loop: {
                until-step-accept: [A, B, C]
                iterate: [
                    {
                        loop: {
                            until-converged: [A.x, A.v, B.f, B.z, C.g]
                            iterate: [
                                {set: A.f}
                                {set: B.v}
                                {set: B.g}
                                {step: A}
                                {step: B}
                                {step: C}
                                # {get-tentative: A.v}
                                {get-tentative: A.x}
                                {set-tentative: B.x}
                                {get-tentative: B.f}
                                {get-tentative: B.z}
                                {set-tentative: C.z}
                                {get-tentative: C.g}
                            ]
                            if-retry-needed: [
                                {restore-state: A}
                                {restore-state: B}
                                {restore-state: C}
                            ]
                        }
                    }
                ]
                if-retry-needed: [
                    {restore-state: A}
                    {restore-state: B}
                    {restore-state: C}
                ]
            }
        }
    ]
}
