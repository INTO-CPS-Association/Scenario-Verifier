name = "Master algorithm for MSD with algebraic loop across state variables."
fmus{}
scenario = {
    instances = {
        msd1 = {
            inputs = {
                fk = {reactivity=reactive}
            },
            outputs = {
                x1 = {dependencies-init=[], dependencies=[]}
                z = {dependencies-init=[], dependencies=[]}
            }
        }
        msd2 = {
        //location of fmus  + simulation parameteres
            inputs = {
                x1 = {reactivity=reactive}
                z = {reactivity=delayed}
            },
            outputs = {
                fk = {dependencies-init=[], dependencies=[]}
            }
        }
    }
    connections = [
        msd1.x1 -> msd2.x1
        msd1.z -> msd2.z
        msd2.fk -> msd1.fk
    ]
}
initialization = [
    {get: msd1.x1}
    {set: msd2.x1}
    {get: msd2.fk}
    {set: msd1.fk}
    {get: msd1.z}
    {set: msd2.z}
]
cosim-step = {
    cosim-step1 =
    [
        {save-state: msd1}
        {save-state: msd2}
        {
            loop: {
                until-converged: [msd1.x1, msd2.fk]
                iterate: [
                    {set: msd2.x1}
                    {step: msd2}
                    {get-tentative: msd2.fk}
                    {set-tentative: msd1.fk}
                    {step: msd1}
                    {get-tentative: msd1.x1}
                ]
                if-retry-needed: [
                    {restore-state: msd1}
                    {restore-state: msd2}
                ]
            }
        }
        {get: msd1.z}
        {set: msd2.z}
    ]
}
