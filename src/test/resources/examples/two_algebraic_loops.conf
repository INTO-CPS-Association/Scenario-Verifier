name = "Master algorithm for MSD with algebraic loop across state variables."
scenario = {
    fmus = {
        msd1 = {
            inputs = {
                fk = {reactivity=reactive}
            },
            outputs = {
                x1 = {dependencies-init=[], dependencies=[]}
                v1 = {dependencies-init=[], dependencies=[]}
                z = {dependencies-init=[], dependencies=[]}
            }
        }
        msd2 = {
            inputs = {
                x1 = {reactivity=reactive}
                v1 = {reactivity=reactive}
                z = {reactivity=delayed}
            },
            outputs = {
                fk = {dependencies-init=[x1, v1], dependencies=[x1, v1]}
            }
        },
        msd3 = {
            inputs = {
                A = {reactivity=reactive}
            },
            outputs = {
                B = {dependencies-init=[], dependencies=[]}
            }
        },
        msd4 = {
            inputs = {
                A = {reactivity=reactive}
            },
            outputs = {
                B = {dependencies-init=[], dependencies=[]}
            }
        }
    }
    connections = [
        msd1.x1 -> msd2.x1
        msd1.v1 -> msd2.v1
        msd1.z -> msd2.z
        msd2.fk -> msd1.fk
        msd3.B -> msd4.A
        msd4.B -> msd3.A
    ]
}
initialization = [
    {get: msd1.x1}
    {set: msd2.x1}
    {get: msd1.v1}
    {set: msd2.v1}
    {get: msd2.fk}
    {set: msd1.fk}
    {get: msd1.z}
    {set: msd2.z}
    {get: msd3.B}
    {set: msd4.A}
    {get: msd4.B}
    {set: msd3.A}
]
cosim-step = [
    {save-state: msd1}
    {save-state: msd2}
    {
        loop: {
            until-converged: [msd1.x1, msd1.v1, msd2.fk]
            iterate: [
                {set: msd2.x1}
                {set: msd2.v1}
                {step: msd2}
                {get-tentative: msd2.fk}
                {set-tentative: msd1.fk}
                {step: msd1}
                {get-tentative: msd1.x1}
                {get-tentative: msd1.v1}
            ]
            if-retry-needed: [
                {restore-state: msd1}
                {restore-state: msd2}
            ]
        }
    }
    {get: msd1.z}
    {set: msd2.z}
    {save-state: msd3}
    {save-state: msd4}
    {
        loop: {
            until-converged: [msd3.B, msd4.B]
            iterate: [
                {set: msd4.A}
                {step: msd4}
                {get-tentative: msd4.B}
                {set-tentative: msd3.A}
                {step: msd3}
                {get-tentative: msd3.B}
            ]
            if-retry-needed: [
                {restore-state: msd3}
                {restore-state: msd4}
            ]
        }
    }
]
