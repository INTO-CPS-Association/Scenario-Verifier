name = "Example master that has a loop within a loop"
scenario = {
    fmus = {
        msd1 = {
            can-reject-step = true,
            inputs = {
                fk = {reactivity=reactive}
            }
            outputs = {
                x1 = {dependencies-init=[], dependencies=[]}
                v1 = {dependencies-init=[], dependencies=[]}
            }
        }
        msd2 = {
            can-reject-step = true,
            inputs = {
                x1 = {reactivity=delayed}
                v1 = {reactivity=reactive}
                G = {reactivity=reactive}
            }
            outputs = {
                fk = {dependencies-init=[x1, v1], dependencies=[x1, v1]}
                z = {dependencies-init=[], dependencies=[]}
            }
        }
        msd3 = {
            can-reject-step = true,
            inputs = {
                z = {reactivity=delayed}
            }
            outputs = {
                G = {dependencies-init=[z], dependencies=[z]}
            }
        }
    }
    connections = [
        msd1.x1 -> msd2.x1
        msd1.v1 -> msd2.v1
        msd2.fk -> msd1.fk
        msd2.z -> msd3.z
        msd3.G -> msd2.G
    ]
    max-possible-step-size = 3 # This means all possible steps that the master can take at each cosimstep.
}
initialization = [
    {get: msd1.x1}
    {set: msd2.x1}
    {get: msd1.v1}
    {set: msd2.v1}
    {get: msd2.fk}
    {set: msd1.fk}
    {get: msd2.z}
    {set: msd3.z}
    {get: msd3.G}
    {set: msd2.G}
]
cosim-step = [
    {save-state: msd1}
    {save-state: msd2}
    {save-state: msd3}
    {
        loop: {
            until-step-accept: [msd1, msd2, msd3]
            iterate: [
                {
                    loop: {
                        until-converged: [msd1.x1, msd1.v1, msd2.fk, msd2.z, msd3.G]
                        iterate: [
                            {set: msd1.fk}
                            {set: msd2.v1}
                            {set: msd2.G}
                            {step: msd1}
                            {step: msd2}
                            {step: msd3}
                            {get-tentative: msd1.v1}
                            {get-tentative: msd1.x1}
                            {set-tentative: msd2.x1}
                            {get-tentative: msd2.fk}
                            {get-tentative: msd2.z}
                            {set-tentative: msd3.z}
                            {get-tentative: msd3.G}
                        ]
                        if-retry-needed: [
                            {restore-state: msd1}
                            {restore-state: msd2}
                            {restore-state: msd3}
                        ]
                    }
                }
            ]
            if-retry-needed: [
                {restore-state: msd1}
                {restore-state: msd2}
                {restore-state: msd3}
            ]
        }
    }
]
