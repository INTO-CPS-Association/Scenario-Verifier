package fmi3

import org.intocps.verification.scenarioverifier.api.GenerationAPI
import org.intocps.verification.scenarioverifier.core.ScenarioLoaderFMI3
import org.scalatest.flatspec._
import org.scalatest.matchers._
import org.scalatest.Assertion

class SynthesizerTest extends AnyFlatSpec with should.Matchers {
  private def synthesizeAndVerify(resourcesFile: String): Assertion = {
    val conf = getClass.getResourceAsStream(resourcesFile)
    val masterModel = ScenarioLoaderFMI3.load(conf)
    val synthesizedAlgorithm = GenerationAPI.synthesizeAlgorithm(masterModel.name, masterModel.scenario)
    assert(synthesizedAlgorithm.initialization.nonEmpty)
    assert(synthesizedAlgorithm.cosimStep.nonEmpty)
    assert(synthesizedAlgorithm.cosimStep.values.size == masterModel.cosimStep.values.size)
    val nFMUs = masterModel.scenario.fmus.size
    // We have to add 2 * nFMUs to account for the EnterInitMode and ExitInitMode actions generated by the ScenarioLoader
    assert((synthesizedAlgorithm.initialization.length + 2 * nFMUs) == masterModel.initialization.length)
  }

  it should "create valid Master Algorithm for Simple Master" in {
    synthesizeAndVerify("../examples_fmi_3/simple_master_fmi3.conf")
  }

  it should "create valid Master Algorithm for Motivation Example" in {
    synthesizeAndVerify("../examples_fmi_3/motivation_example.conf")
  }

  it should "create valid Master Algorithm for Paper Example" in {
    synthesizeAndVerify("../examples_fmi_3/example.conf")
  }
  // it should "create valid Master Algorithm for Powersystem" in {
  //   synthesizeAndVerify("../examples_fmi_3/powersystem.conf")
  // }
}
