# A name for the scenario
name = "Master algorithm for Mass Spring Damper example."

# The scenario which defines fmus with ports where the port reactivity and dependencies are defined.
# It also defines connections between output and input ports.
scenario = {
    fmus = {
        FMU_QuarterCar_qcar = {
            inputs = {
                DamperForce = {reactivity=delayed}
            },
            outputs = {
                # RattlePos = {dependencies-init=[], dependencies=[]}
                RattleSpeed = {dependencies-init=[], dependencies=[]}
                # RattleAcc = {dependencies-init=[], dependencies=[]}
                # SprungPosition = {dependencies-init=[], dependencies=[]}
                SprungSpeed = {dependencies-init=[], dependencies=[]}
                # SprungAcc = {dependencies-init=[], dependencies=[]}
                # UnsprungPosition = {dependencies-init=[], dependencies=[]}
                "x[1]" = {dependencies-init=[], dependencies=[]}
                "x[2]" = {dependencies-init=[], dependencies=[]}
                "x[3]" = {dependencies-init=[], dependencies=[]}
                "x[4]" = {dependencies-init=[], dependencies=[]}
                "x[5]" = {dependencies-init=[], dependencies=[]}
                "x[6]" = {dependencies-init=[], dependencies=[]}
                "x[7]" = {dependencies-init=[], dependencies=[]}
                "u[1]" = {dependencies-init=[], dependencies=[]}
                # "u[2]" = {dependencies-init=[], dependencies=[]}
                # "u[3]" = {dependencies-init=[], dependencies=[]}
                # "u[4]" = {dependencies-init=[], dependencies=[]}
            }
        }
        FMU_Sender_sender = {
            inputs = {
                RattleSpeed = {reactivity=delayed}
                SprungSpeed = {reactivity=delayed}
                "x[1]" = {reactivity=delayed}
                "x[2]" = {reactivity=delayed}
                "x[3]" = {reactivity=delayed}
                "x[4]" = {reactivity=delayed}
                "x[5]" = {reactivity=delayed}
                "x[6]" = {reactivity=delayed}
                "x[7]" = {reactivity=delayed}
                u = {reactivity=delayed}
            },
            outputs = {
                Time1 = {dependencies-init=[], dependencies=[]}
                RattleSpeed1 = {dependencies-init=[], dependencies=[]}
                SprungSpeed1 = {dependencies-init=[], dependencies=[]}
                Time2 = {dependencies-init=[], dependencies=[]}
                RattleSpeed2 = {dependencies-init=[], dependencies=[]}
                SprungSpeed2 = {dependencies-init=[], dependencies=[]}
            }
        }
        FMU_Delay_delay = {
            inputs = {
                RattlsSpeed1 = {reactivity=delayed}
                SprungSpeed1 = {reactivity=delayed}
                RattlsSpeed2 = {reactivity=delayed}
                SprungSpeed2 = {reactivity=delayed}
                Time1 = {reactivity=delayed}
                Time2 = {reactivity=delayed}
            },
            outputs = {
                RattleSpeed1Delayed = {dependencies-init=[], dependencies=[]}
                SprungSpeed1Delayed = {dependencies-init=[], dependencies=[]}
                RattleSpeed2Delayed = {dependencies-init=[], dependencies=[]}
                SprungSpeed2Delayed = {dependencies-init=[], dependencies=[]}
                Time1Delayed = {dependencies-init=[], dependencies=[]}
                Time2Delayed = {dependencies-init=[], dependencies=[]}
            }
        }
        FMU_Receiver_receiver = {
            inputs = {
                Time1 = {reactivity=delayed}
                RattlsSpeed1 = {reactivity=delayed}
                SprungSpeed1 = {reactivity=delayed}
                Time2 = {reactivity=delayed}
                RattlsSpeed2 = {reactivity=delayed}
                SprungSpeed2 = {reactivity=delayed}
            },
            outputs = {
                RattleSpeed_m_s_ = {dependencies-init=[], dependencies=[]}
                SprungSpeed_m_s_ = {dependencies-init=[], dependencies=[]}
            }
        }
        FMU_Damper_damper = {
            inputs = {
                RattleSpeed = {reactivity=delayed}
                SprungSpeed = {reactivity=delayed}
            },
            outputs = {
                DamperForce_N_ = {dependencies-init=[], dependencies=[]}
            }
        }
    }
    connections = [
        FMU_QuarterCar_qcar.RattleSpeed -> FMU_Sender_sender.RattleSpeed
        FMU_QuarterCar_qcar.SprungSpeed -> FMU_Sender_sender.SprungSpeed
        "FMU_QuarterCar_qcar.x[1]" -> "FMU_Sender_sender.x[1]"
        "FMU_QuarterCar_qcar.x[2]" -> "FMU_Sender_sender.x[2]"
        "FMU_QuarterCar_qcar.x[3]" -> "FMU_Sender_sender.x[3]"
        "FMU_QuarterCar_qcar.x[4]" -> "FMU_Sender_sender.x[4]"
        "FMU_QuarterCar_qcar.x[5]" -> "FMU_Sender_sender.x[5]"
        "FMU_QuarterCar_qcar.x[6]" -> "FMU_Sender_sender.x[6]"
        "FMU_QuarterCar_qcar.x[7]" -> "FMU_Sender_sender.x[7]"
        "FMU_QuarterCar_qcar.u[1]" -> FMU_Sender_sender.u

        FMU_Sender_sender.Time1 -> FMU_Delay_delay.Time1
        FMU_Sender_sender.RattleSpeed1 -> FMU_Delay_delay.RattlsSpeed1
        FMU_Sender_sender.SprungSpeed1 -> FMU_Delay_delay.SprungSpeed1
        FMU_Sender_sender.Time2 -> FMU_Delay_delay.Time2
        FMU_Sender_sender.RattleSpeed2 -> FMU_Delay_delay.RattlsSpeed2
        FMU_Sender_sender.SprungSpeed2 -> FMU_Delay_delay.SprungSpeed2

        FMU_Delay_delay.Time1Delayed -> FMU_Receiver_receiver.Time1
        FMU_Delay_delay.RattleSpeed1Delayed -> FMU_Receiver_receiver.RattlsSpeed1
        FMU_Delay_delay.SprungSpeed1Delayed -> FMU_Receiver_receiver.SprungSpeed1
        FMU_Delay_delay.Time2Delayed -> FMU_Receiver_receiver.Time2
        FMU_Delay_delay.RattleSpeed2Delayed -> FMU_Receiver_receiver.RattlsSpeed2
        FMU_Delay_delay.SprungSpeed2Delayed -> FMU_Receiver_receiver.SprungSpeed2

        FMU_Receiver_receiver.RattleSpeed_m_s_ -> FMU_Damper_damper.RattleSpeed
        FMU_Receiver_receiver.SprungSpeed_m_s_ -> FMU_Damper_damper.SprungSpeed

        FMU_Damper_damper.DamperForce_N_ -> FMU_QuarterCar_qcar.DamperForce
    ]
}

# The initialization sequence of the algorithm.
# No need to fill it, as it will be generated automatically
initialization = []

# The step loop of the algorithm.
# No need to fill it, as it will be generated automatically
cosim-step = {}