name = "An Example of a Simple Adaptive Master algorithm"
# Encoding of the scenario
scenario = {
    #The FMUs/SUs of the scenario
    fmus = {
        #An FMU
        msd1 = {
            inputs = {
                #For an input you describe its contract
                    # A contract is a way to describe the appropiate stepping order of the FMUs
                fk = {reactivity=delayed}
            },
            outputs = {
                #For an output you describe if it has any connection to a zero-delay input (Meaning that the output might change when an input changes)
                    #"Depndencies-init" describes this for the initialization while "dependencies" describe this for the step
                x1 = {dependencies-init=[], dependencies=[]}
                v1 = {dependencies-init=[], dependencies=[]}
            }
        }
        msd2 = {
            inputs = {
                x1 = {reactivity=reactive}
                v1 = {reactivity=reactive}
            },
            outputs = {
                fk = {dependencies-init=[x1, v1], dependencies=[]}
            }
        }
    }
    # Configuration describes the different adaptations for a scenario - it is ONLY used to define Adaptive scenarios - can be omitted for non-adaptive scenarios.
    configuration = {
        # Which input can change their input contract?
        configurable-inputs = [msd1.fk, msd2.x1, msd2.v1],
        configurations = {
            conf1 = {
                #The input contract for each input in configurable-inputs
                inputs = {
                    fk = {reactivity=delayed}
                    x1 = {reactivity=reactive}
                    v1 = {reactivity=reactive}
                }
                # The algortihm used to simulate the scenario
                cosim-step = cosim-step1
                # The connections of the adaptation
                connections = [
                    #A connection goes from ONE output to ONE Input
                    msd1.x1 -> msd2.x1
                    msd1.v1 -> msd2.v1
                    msd2.fk -> msd1.fk
                ]
            }
            conf2 = {
                inputs = {
                    fk = {reactivity=reactive}
                    x1 = {reactivity=delayed}
                    v1 = {reactivity=delayed}
                }
                cosim-step = cosim-step2
                connections = [
                    msd1.x1 -> msd2.v1 #Note that the connections are changed
                    msd1.v1 -> msd2.x1  #Note that the connections are changed
                    msd2.fk -> msd1.fk
                ]
            }
        }
    }
    # The default connections of the system
    connections = [
        msd1.x1 -> msd2.x1
        msd1.v1 -> msd2.v1
        msd2.fk -> msd1.fk
    ]
}
#The orchestration algortihm
# The initialization procedure used to exchange values when setting up the system.
# A scenario does ONLY have one initialization procedure eventhough it is adaptive.
initialization = [
    {get: msd1.x1} #Obtaining the value on the output x1 of msd1
    {set: msd2.x1} #Setting the value obtain by the previous action on the input x1 of msd2
    {get: msd1.v1}
    {set: msd2.v1}
    {get: msd2.fk}
    {set: msd1.fk}
]
# The co-simulation step procedure used adcance the system from the time t to the time t+H
cosim-step = {
    #This links the adaptation conf1 together with the algortithm cosim-step1 decribed below.
    cosim-step1 =
    [
        {step: msd1} #Advancing the state of msd1
        {get: msd1.x1}
        {set: msd2.x1}
        {get: msd1.v1}
        {set: msd2.v1}
        {step: msd2}
        {get: msd2.fk}
        {set: msd1.fk}
    ]
    #This links the adaptation conf2 together with the algortithm cosim-step2 decribed below.
    cosim-step2 =
    [
        {step: msd2}
        {get: msd2.fk}
        {set: msd1.fk}
        {step: msd1}
        {get: msd1.x1}
        {get: msd1.v1}
        {set: msd2.x1}
        {set: msd2.v1}
    ]
}
